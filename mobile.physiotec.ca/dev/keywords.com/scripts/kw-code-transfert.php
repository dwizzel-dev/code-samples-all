<?php
/**
@auth:	Dwizzel
@date:	00-00-0000
@info:	script des transferts des codes
@inst:
		kwtype == 1 // est un keyword 
		kwtype == 2 // est un short_title d'un exercice ou plusieur si ils sont pareils
		kwtype == 3 // est un code exercice
				
*/
//-----------------------------------------------------------------------------------------------

header('Content-Type: text/plain; charset=utf-8', true);

EXIT('COMMENT LINE '.__LINE__.' TO RUN'."\n"); //remove to insert data

// ERROR REPORTING
error_reporting(E_ALL);
// BASE DEFINE
require_once('/var/www/mobile....@physiotec.ca/dev/keywords.com/scripts/kw-define.php');
//check if it was defined
if(!defined('DIR_CLASS')){
	define('DIR_CLASS', DIR_BASE_CLASS.'SCRIPT/');
	}
if(!defined('DIR_INC')){
	define('DIR_INC', DIR_BASE_INC.'SCRIPT/');
	}
if(!defined('DIR_LOGS')){
	define('DIR_LOGS', DIR_BASE_LOGS.'SCRIPT/');
	}
//helpers function for all sites
require_once(DIR_INC.'helpers.php');
//functions for this specific sites
require_once(DIR_INC.'functions.php');
//change the error handling if it is defined in the function.php or helpers.php file
if(function_exists('phpErrorHandler')){
	set_error_handler('phpErrorHandler');
	}
//required 
require_once(DIR_CLASS.'globals.php');
require_once(DIR_CLASS.'utility.php');
require_once(DIR_CLASS.'registry.php');
require_once(DIR_CLASS.'log.php');
require_once(DIR_CLASS.'database.php');
require_once(DIR_CLASS.'errors.php');
require_once(DIR_CLASS.'json.php');
//register new class too the registry to simplify arguments passing to other classes
$oReg = new Registry();
$oReg->set('glob', new Globals());	
$oReg->set('utils', new Utility($oReg));		
$oReg->set('log', new Log($oReg));
$oReg->set('err', new Errors($oReg));
$oReg->set('json', new Json());
//minor check on main db connection
$oReg->set('db', new Database(DB_TYPE, DB_HOSTNAME, DB_USERNAME, DB_PASSWORD, DB_DATABASE, $oReg));
if(!$oReg->get('db')->getStatus()){
	exit('ERR: NO DATABASE CONNECTION[db]');
	}

//-----------------------------------------------------------------------------------------------

//show
echo 'START SCRIPT'.EOL.EOL;
//VARS
$iSleep = 0;
$bExecute = false;
$gLogName = 'err-code-transfert';
// LIMITER
$gContinue = true;
$gMinIdExexercise = 0;
$gLimitMax = 0; //0 = no limit
$gLimitStart = 0;
$gChunkLimit = 100;
$gArrLocaleEnabled = array(
	'en_US',
	'fr_CA',
	'de_DE',
	'es_MX',
	'fr_FR',
	'nl_NL',
	'pt_PT',
	);
//LE SELECT DE BASE
$gBaseQuery = 'SELECT idExercise AS "id", codeExercise AS "code", idUser AS "idUser" FROM exercise WHERE ready = "1" AND oldIdExercise <> 0 AND idExercise >= '.intVal($gMinIdExexercise).' ORDER BY idExercise ASC LIMIT ';
//LOOP DES CHUNKS
while($gContinue){
	//select from DB
	$query = $gBaseQuery.$gLimitStart.','.$gChunkLimit.';';	
	//show		
	echo $query.EOL.EOL;	
	//result set
	$rs = $oReg->get('db')->query($query);
	//minor check
	if($rs && $rs->num_rows){
		foreach($rs->rows as $k=>$v){
			//pour l'instant on met le rank a 333
			$strRankEx = '333';
			$idEx = intVal($v['id']);
			$idUser = intVal($v['idUser']);
			$strCode = str_replace("\n", '', $v['code']);
			$idLicence = 0;
			//si le idUser est different de 0, alors on va chercher le idLicence du idUser
			if($idUser !== 0){
				//select from DB
				$query = 'SELECT DISTINCT(idLicence) AS "idLicence" FROM licence_admin WHERE idUser = "'.$idUser.'" LIMIT 0,1;';
				//show		
				//echo $query.EOL.EOL;
				//result set
				$rsUser = $oReg->get('db')->query($query);
				//minor check
				if($rsUser && $rsUser->num_rows){
					$idLicence = intVal($rsUser->row['idLicence']);
					}
				//clean
				unset($rsUser);
				//si encore a 0 alors on cherche ailleurs
				if($idLicence === 0){
					//select from DB
					$query = 'SELECT DISTINCT(idLicence) AS "idLicence" FROM licence_clinic, clinic_user WHERE licence_clinic.idClinic = clinic_user.idClinic AND clinic_user.idUser = "'.$idUser.'" LIMIT 0,1;';	
					//show		
					//echo $query.EOL.EOL;
					//result set
					$rsLicence = $oReg->get('db')->query($query);
					//minor check
					if($rsLicence && $rsLicence->num_rows){
						$idLicence = intVal($rsLicence->row['idLicence']);
						}
					//clean
					unset($rsLicence);
					}
				}
			//ca veux dire que ca ne fonctionne pas alors on ne fait rien
			if($idUser !== 0 && $idLicence !== 0 || $idUser === 0 && $idLicence === 0){
				//minor check sur ce queon a besoin
				if($strCode != ''){
					//par lang locale
					foreach($gArrLocaleEnabled AS $k2=>$v2){
						//lang
						$strLangLocale = $v2;
						//on va faire l'insertion on va faire les duplicates avec un script final
						//le kwtype = 3 = un code exercice 
						$insert = 'INSERT INTO keyword (idLicence, keyword, locale, autogenerated, kwtype) VALUES("'.$idLicence.'", "'.$oReg->get('db')->escape($strCode).'", "'.$oReg->get('db')->escape($strLangLocale).'", "0", "3");';
						//show
						echo $insert.EOL.EOL;
						//exec or not
						if($bExecute){	
							//on fait le update
							$rs2 = $oReg->get('db')->query($insert);
							//on va chercher le dernier id car on va l'associer avec les exercice relatif a celui-ci
							if($rs2){
								$newKwId = intVal($rs2->insert_id);
								//minor check
								if($newKwId !== false && $newKwId !== 0){
									//query
									$insertEx = 'INSERT INTO keyword_exercise (idKeyword, idExercise) VALUES("'.$newKwId.'", "'.$idEx.'");';
									//show
									echo $insertEx.EOL.EOL;
									//on va inserer les keyword_exercices
									$rs3 = $oReg->get('db')->query($insertEx);
									//clean
									unset($rs3);
									//on va inserer le rank maintenant
									//query
									$insertRank = 'INSERT INTO keyword_rank (idKeyword, locale, rank) VALUES("'.$newKwId.'", "'.$oReg->get('db')->escape($strLangLocale).'", "'.$oReg->get('db')->escape($strRankEx).'");';
									//show
									echo $insertRank.EOL.EOL;
									//on va inserer les keyword_exercices
									$rs3 = $oReg->get('db')->query($insertRank);
									//clean
									unset($rs3);
								}else{
									$strErr = 'Error[0] newKwId['.$newKwId.'] idEx=['.$idEx.']';
									trigger_error($strErr, E_USER_NOTICE);
									$oReg->get('log')->log($gLogName.'-0', $strErr);
									sleep($iSleep);
									}
							}else{
								$strErr = 'Error[1] RS idEx=['.$idEx.']';
								trigger_error($strErr, E_USER_NOTICE);
								$oReg->get('log')->log($gLogName.'-1', $strErr);
								sleep($iSleep);
								}
							}
						}
					//clean
					unset($k2, $v2);
				}else{
					$strErr = 'Error on strCode "'.$strCode.'" idEx=['.$idEx.']';
					trigger_error($strErr, E_USER_NOTICE);
					$oReg->get('log')->log($gLogName.'-2', $strErr);
					sleep($iSleep);
					}
			}else{
				$strErr = 'Error on idEx|idLicence|idUser=['.$idEx.'|'.$idLicence.'|'.$idUser.']';
				trigger_error($strErr, E_USER_NOTICE);
				$oReg->get('log')->log($gLogName.'-3', $strErr);
				sleep($iSleep);
				}
			}//end for
		//clean
		unset($k, $v);	
	}else{
		$gContinue = false;
		}
	//clean
	unset($rs);
	//increment	
	$gLimitStart += $gChunkLimit;
	//pour ne pas tout faire	
	if($gLimitStart > $gLimitMax && $gLimitMax > 0){
		$gContinue = false;
		}
	}
//show
echo 'END SCRIPT'.EOL.EOL;






//END
